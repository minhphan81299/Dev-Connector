Learning:
1) mongoose.connect will return a Promise
2) Normally every basic API resource contains of two parts:
-   a controller which handles the different request types(POST, GET, PUT, DELETE)
-   the actual resource that takes care of the CRUD operations
3) Why use body-parser :  
-   http sends your form data in bits and pieces which are intended to get assembled as they reach their destination. So how would you extract your data.
-   body-parser parses your request and converts it into a format from which you can easily extract relevant information that you may need.
So basically, body-parser parsed your incoming request, assembled the chunks containing your form data, then created this body object for you and filled it with your form data.
4) app.post and get return Promise
-   example: app.post().then(data=>res.json(data))
5) JSON WEB TOKEN
-   Authentication: When user logged in and then make requests which contain JWT. This will allow user access in urls, service and resource. 
=> This method is not affected by Cross-origin-Resource Sharing(Cors) because it does not use Cookie
- What is Cors ? Cors is the method that allow another domain being able to query  (fonts, Javascript, v.vâ€¦) of website

6) DB FindOne() and find() method will return Promise
7) Middleware is function which is access to request and respond and it has a "next" CALLBACK 
Packages
8) Resful API is stateless (no data) ( Server does not save client data and when Client and server stop contact, there no connection from them)
   - Stateful is about server having the data (server can save data of user in Session)
   - Session is saved on server , a session start when client send request to server
   - Cookie is saved on your browser. When use going into page, the browser will send the cookie contain your information( last use,or slt...) to the server
   - How the server know that session is your session. Basically, the cookie will contain the session which is corresponding with that user So that need to compare cookie that client send to server and session in server
9) config : create a global variable used for the whole app ( create default.json and add variable into it, when use require('config') it will use the variable which you declare in default.json)
(to use it: 
- create a variable mongoURI in file default.json in config folder
- const db = config.get("mongoURI"); 

)
10) trim() remove white space from string
11) When use any method about database( find, .... ) you need to use async await
12) save() method use on instance Ex: Profile.save() => profile.save()
13) - array.push will to the end of array
    - array.unshift will push to the first of array
14) After update delete remember to db.save()